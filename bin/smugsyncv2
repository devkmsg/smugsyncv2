#!/usr/bin/env ruby
require 'smugsyncv2'
require 'fileutils'
require 'open-uri'
require 'tmpdir'
require 'thor'
require 'uri'

#
# DownloadTaggedSmugmugPhotos
#
class DownloadTaggedSmugmugPhotos < Thor

  attr_reader :client

  API_KEY_LINK = 'https://secure.smugmug.com/settings/#section=api-keys'.freeze

  # rubocop:disable LineLength
  desc 'download tagged images from SmugMug', 'download OPTIONS'
  option :key, required: true, type: :string,
               banner: "This is the SmugMug API key.  Can be found at: #{API_KEY_LINK}"
  option :secret, required: true, type: :string,
                  banner: "This is the SmugMug API secret key.  Can be found at: #{API_KEY_LINK}"
  option :tags, required: true, type: :array,
                banner: 'These are the tagged images you wish to download'
  option :dest, required: false, type: :string, default: Dir.mktmpdir
  option :logging, required: false, type: :boolean, default: false
  # rubocop:enable LineLength

  def download # rubocop:disable MethodLength, AbcSize
    FileUtils.mkdir_p options[:dest] unless File.exist? options[:dest]

    puts 'Scanning destination directory'
    @downloads = Dir.glob(options[:dest])
    @downloads.map! { |d| { name: File.basename(d), size: File::Stat.new(d).size } }

    @client = Smugsyncv2::Client.new(options[:key], options[:secret], options[:logging])

    user_uri = client.get_uri('AuthUser').response.Response.User.Uri
    image_search_uri = client.get_uri('ImageBase.ImageSearch').response.Response.Uri

    puts "Downloading into #{options[:dest]}"
    options[:tags].each do |tag|
      params = { 'Keywords' => tag,
                 'SortDirection' => 'Descending',
                 'SortMethod' => 'DateTaken',
                 'Scope' => user_uri }

      image_search_response = client.request(path: image_search_uri, params: params)
      images = image_search_response.Response.Image
      images.each do |image|
        date_created = date_created(image)
        download_image(image, options[:dest], date_created)
      end

      while image_search_response.Response.Pages.respond_to?(:NextPage)
        next_page_params = URI.parse(image_search_response.Response.Pages.NextPage).query
        next_page_params = URI.decode_www_form(next_page_params)
        params = {}
        next_page_params.map { |p| params[p[0]] = p[1] }
        image_search_response = client.request(path: image_search_uri, params: params)
        images = image_search_response.Response.Image
        images.each do |image|
          date_created = date_created(image)
          download_image(image, options[:dest], date_created)
        end
      end
      puts "Downloaded #{images.length} images into #{options[:dest]}"
    end
  end

  no_tasks do # rubocop:disable BlockLength
    def image_url(image, date_created) # rubocop:disable AbcSize
      image_uri = image.Uris.LargestImage.Uri
      image_response = @client.request(path: image_uri)
      image = image_response.Response.LargestImage
      image_filename = image_filename(image.Url, date_created)
      downloaded = @downloads.reject! { |d| d[:name] == image_filename && d[:size] == image.Size } # Remove already downloaded images
      return image.Url if downloaded.nil?
      false
    end

    def date_created(image)
      date_created = client.request(path: image.Uris.ImageMetadata.Uri)
      date_created = date_created.Response.ImageMetadata.DateTimeCreated
      date_created.gsub!(/[-:]/, '').tr!('T', '_')
    end

    def image_filename(image_url, date_created)
      uri = URI.parse(image_url)
      "#{date_created}-#{File.basename(uri.path)}"
    end

    def download_image(image, dest, date_created) # rubocop:disable MethodLength
      url = image_url(image, date_created)
      if url
        dest_file = image_filename(url, date_created)
        dest_path = File.join(dest, dest_file)
        say_status('Download', "Downloading #{dest_file}")
        File.open(dest_path, 'wb') do |saved_file|
          open(url, 'rb') do |read_file|
            saved_file.write read_file.read
          end
        end
      else
        say_status('Download', 'Skipping download, already downloaded')
      end
    end
  end
end

DownloadTaggedSmugmugPhotos.start(ARGV)
