#!/usr/bin/env ruby
require 'smugsyncv2'
require 'fileutils'
require 'open-uri'
require 'tmpdir'
require 'thor'
require 'uri'

class DownloadTaggedSmugmugPhotos < Thor

  attr_reader :client

  desc 'download tagged images from SmugMug', 'download OPTIONS'
  option :key, required: true, type: :string, banner: 'This is the SmugMug API key.  Can be found at: https://secure.smugmug.com/settings/#section=api-keys'
  option :secret, required: true, type: :string, banner: 'This is the SmugMug API secret key.  Can be found at: https://secure.smugmug.com/settings/#section=api-keys'
  option :tags, required: true, type: :array, banner: 'These are the tagged images you wish to download'
  option :dest, required: false, type: :string, default: Dir.mktmpdir
  option :logging, required: false, type: :boolean, default: false
  def download
    FileUtils.mkdir_p options[:dest] unless File.exist? options[:dest]
    @client = Smugsyncv2::Client.new(options[:key], options[:secret], options[:logging])

    image = client.request
    image = client.get_uri('ImageBase')
    image_search = client.get_uri('ImageSearch', image.Response.Uris)
    image_search_uri = image_search.Response.Uri

    puts "Downloading into #{options[:dest]}"
    options[:tags].each do |tag|
      params = { 'Keywords' => tag,
                 'SortDirection' => 'Descending',
                 'SortMethod' => 'DateTaken',
                 'Scope' => user_uri }

      image_search_response = client.request(path: image_search_uri, params: params)
      images = image_search_response.Response.Image
      images.each do |image|
        download_image(image, options[:dest])
      end

      while image_search_response.Response.Pages.respond_to?(:NextPage)
        next_page_params = URI.parse(image_search_response.Response.Pages.NextPage).query
        next_page_params = URI.decode_www_form(next_page_params)
        params = {}
        next_page_params.map { |p| params[p[0]] = p[1] }
        image_search_response = client.request(path: image_search_uri, params: params)
        images = image_search_response.Response.Image
        images.each do |image|
          download_image(image, options[:dest])
        end
      end
      puts "Downloaded #{images.length} images into #{options[:dest]}"
    end
  end

  no_tasks do
    def image_url(image)
      image_uri = image.Uris.LargestImage.Uri
      image_response = @client.request(path: image_uri)
      image_response.Response.LargestImage.Url
    end

    def image_filename(image_url)
      uri = URI.parse(image_url)
      File.basename(uri.path)
    end

    def download_image(image, dest)
      url = image_url(image)
      dest_file = image_filename(url)
      dest_path = File.join(dest, dest_file)
      say 'Download', "Downloading #{dest_file}"
      File.open(dest_path, 'wb') do |saved_file|
        open(url, 'rb') do |read_file|
          saved_file.write read_file.read
        end
      end
    end
  end
end

DownloadTaggedSmugmugPhotos.start(ARGV)
